# ---------------------------------------
# Helper: Load immediates using ADDI
# ---------------------------------------
    addi x1, x0, 0          # x1 = 0
    addi x2, x0, 15         # x2 = 15
    addi x3, x0, -10        # x3 = -10
    addi x4, x0, 20         # x4 = 20
    addi x5, x0, -20        # x5 = -20

# Load large values for overflow/underflow tests
    lui x6, 0x7FFFF         # x6 = 0x7FFFF000 (Max positive 32-bit)
    addi x6, x6, 0x7FF      # x6 = 0x7FFFFFFF (INT_MAX)
    lui x7, 0x80000         # x7 = 0x80000000 (INT_MIN)

# ---------------------------------------
# Test 1: Subtracting zero (15 - 0)
# Result -> x10
# ---------------------------------------
    sub x10, x2, x1         # x10 = 15 - 0 = 15

# ---------------------------------------
# Test 2: Subtraction between two registers (20 - 15)
# Result -> x11
# ---------------------------------------
    sub x11, x4, x2         # x11 = 20 - 15 = 5

# ---------------------------------------
# Test 3: Negative and positive number combinations (-10 - 20)
# Result -> x12
# ---------------------------------------
    sub x12, x3, x4         # x12 = -10 - 20 = -30

# ---------------------------------------
# Test 4: Verify rd updates correctly (20 - (-20))
# Result -> x13
# ---------------------------------------
    sub x13, x4, x5         # x13 = 20 - (-20) = 40

# ---------------------------------------
# Test 5: Overflow and underflow checks
# ---------------------------------------

# Overflow: INT_MAX - (-1) -> Should wrap to INT_MIN
    addi x8, x0, -1         # x8 = -1
    sub x14, x6, x8         # x14 = 0x7FFFFFFF - (-1) = 0x80000000 (INT_MIN via wrap)

# Underflow: INT_MIN - 1 -> Should wrap to INT_MAX
    addi x9, x0, 1          # x9 = 1
    sub x15, x7, x9         # x15 = 0x80000000 - 1 = 0x7FFFFFFF (INT_MAX via wrap)

# ---------------------------------------
# End: Results stored in x10 - x15
# x10 = 15, x11 = 5, x12 = -30, x13 = 40, x14 = INT_MIN, x15 = INT_MAX
# ---------------------------------------
